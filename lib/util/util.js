var typeMap = {    "[object Undefined]":"undefined",    "[object Null]":"null",    "[object Number]":"number",    "[object Object]":"object",    "[object Array]":"array",    "[object Boolean]":"boolean",    "[object Function]":"function",    "[object String]":"string"};var $ = util = {    type: function (obj) {        return typeMap[Object.prototype.toString.call(obj)];    },    each:function(obj,callback){      var self = this;      if(!obj || !callback) return;      for(var key in obj){        var result = callback.call(obj[key],key,obj[key]);        if(self.type(result) == "boolean"){          if(result) continue;          else break;        }      }    }};for(var key in typeMap){    eval('$["is'+typeMap[key].charAt(0).toUpperCase()+typeMap[key].substring(1)+'"] = function(obj){\        return $.type(obj) === "'+typeMap[key]+'";\    }');}module.exports = util;